Build1=Default,co.micromacro.camera
File1=1.bal
File2=Config.bal
File3=StillPicture.bal
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
Group=Default Group
Library1=core
Library2=javaobject
Library3=camera2
Library4=runtimepermissions
Library5=nfc
Library6=xui views
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~AddPermission(android.permission.RECORD_AUDIO)
Module1=CamEx2
Module2=ConfigActivity
Module3=Starter
NumberOfFiles=3
NumberOfLibraries=6
NumberOfModules=3
Version=10
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: CameraMicro
	#VersionCode: 1
	#VersionName: 1.03
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: False
#End Region
#BridgeLogger: true

Sub Process_Globals
	Private frontCamera As Boolean = False
	Private VideoMode As Boolean = False
	Private VideoFileDir, VideoFileName As String
	Private MyTaskIndex As Int
	Private rp As RuntimePermissions
	Private cvs As B4XCanvas
	Public isFlash As Boolean = False
End Sub

Sub Globals
	Private cam As CamEx2
	Private pnlCamera As Panel
	Private pnlPicture As Panel
	Private pnlBackground As Panel
	'Private btnEffects As Button
	Private btnScene As Button
	Private buttons As List
	Private btnAutoExposure As Button
	Private btnFocus As Button
	Private ProgressBar1 As ProgressBar
	Private openstate, busystate As Boolean
	Private btnRecord As Button
	Private barZoom As SeekBar
	Private pnlTarget As Panel
	'sensor size
	Private rectSensorSize As Rect
	
	Private btnConfig As Button
	Private btnClose As Button

End Sub

Sub Activity_Create(FirstTime As Boolean)
	VideoFileDir = rp.GetSafeDirDefaultExternal("")
	VideoFileName = "1.mp4"
	Activity.LoadLayout("1")
	Activity.LoadLayout("StillPicture")
	cam.PrintKeys = True
	cam.Initialize(pnlCamera)
	Log("HW support level")
	Log(cam.SupportedHardwareLevel)

	Dim cd As ColorDrawable
	cd.Initialize(Colors.ARGB(60,255,255,255),0dip)
	btnAutoExposure.Background = cd
	btnFocus.Background = cd
	btnScene.Background = cd
	

	buttons = Array(btnScene, btnAutoExposure, btnFocus)
	SetState(False, False, VideoMode)
	
	Dim cdBlueBg As ColorDrawable
	cdBlueBg.Initialize(Colors.ARGB(192,0,191,255),2dip)
	btnConfig.Background = cdBlueBg
	btnRecord.Background = cdBlueBg
	btnClose.Background = cdBlueBg
	
	
	cvs.Initialize(pnlTarget)
	

	
End Sub

Sub Activity_Resume
	OpenCamera(frontCamera)
	
	Dim x = pnlTarget.Width/2 As Float
	Dim y = pnlTarget.Height/2 As Float
	Dim radius = 86dip As Float
	cvs.DrawCircle(x,y,radius,Colors.ARGB(100,255,0,0),False,2dip)
	cvs.Invalidate
End Sub


Sub OpenCamera (front As Boolean)
	rp.CheckAndRequest(rp.PERMISSION_CAMERA)
	Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
	If Result = False Then
		ToastMessageShow("No permission!", True)
		Return
	End If
	
	SetState(False, False, VideoMode)
	Wait For (cam.OpenCamera(front)) Complete (TaskIndex As Int)
	If TaskIndex > 0 Then
		MyTaskIndex = TaskIndex 'hold this index. It will be required in later calls.
		Wait For(PrepareSurface) Complete (Success As Boolean)
	End If
	Log("Start success: " & Success)
	SetState(Success, False, VideoMode)
	If Success = False Then
		ToastMessageShow("Failed to open camera", True)
	End If
End Sub

Sub PrepareSurface As ResumableSub
	SetState(False, busystate, VideoMode)
	'sizes can be modified here
	If VideoMode Then
		cam.PreviewSize.Initialize(640, 480)
		'Using a temporary file to store the video.
		Wait For (cam.PrepareSurfaceForVideo(MyTaskIndex, VideoFileDir, "temp-" & VideoFileName)) Complete (Success As Boolean)
	Else
		cam.PreviewSize.Initialize(1920, 1080)
		rectSensorSize = cam.getActiveArraySize()
		cam.CaptureSize.Initialize(rectSensorSize.Width,rectSensorSize.Height)
		Wait For (cam.PrepareSurface(MyTaskIndex)) Complete (Success As Boolean)
	End If
	If Success Then cam.StartPreview(MyTaskIndex, VideoMode)
	SetState(Success, busystate, VideoMode)
	
	Return Success
End Sub


Sub Activity_Pause (UserClosed As Boolean)
	cam.Stop
End Sub



Sub btnRecord_Click
	TakePicture
End Sub


Sub HandleError (Error As Exception)
	Log("Error: " & Error)
	ToastMessageShow(Error, True)
	OpenCamera(frontCamera)
End Sub

Sub TakePicture
	Try
		SetState(openstate, True, VideoMode)
		
		If isFlash Then
			cam.setAutoExposureMode("ON_ALWAYS_FLASH")
		End If
		
		Wait For(cam.FocusAndTakePicture(MyTaskIndex)) Complete (Data() As Byte)
		SetState(openstate, False, VideoMode)
		Dim nowString = DateTime.Now As String
		Dim fileName = nowString & ".jpg" As String
		cam.DataToFile(Data, VideoFileDir, fileName)
		Dim bmp As Bitmap = cam.DataToBitmap(Data)
		Log("Picture taken: " & bmp) 'ignore
		pnlBackground.SetVisibleAnimated(100, True)
		pnlPicture.SetBackgroundImage(bmp.Resize(pnlPicture.Width, pnlPicture.Height, True)).Gravity = Gravity.CENTER
		Sleep(4000)
		pnlBackground.SetVisibleAnimated(500, False)
	Catch
		HandleError(LastException)
	End Try
	
End Sub

Sub pnlPicture_Click
	pnlBackground.Visible = False
End Sub

'Sub btnEffects_Click
'	Dim effects As List = cam.SupportedEffectModes
'	Dim i As Int = effects.IndexOf(cam.EffectMode)
'	i = (i + 1) Mod effects.Size
'	cam.EffectMode = effects.Get(i)
'	btnEffects.Text = effects.Get(i)
'	cam.StartPreview(MyTaskIndex, VideoMode)
'End Sub

Sub btnScene_Click
	Dim scenes As List = cam.SupportedSceneModes
	Dim i As Int = scenes.IndexOf(cam.SceneMode)
	i = (i + 1) Mod scenes.Size
	cam.SceneMode = scenes.Get(i)
	btnScene.Text = scenes.Get(i)
	cam.StartPreview(MyTaskIndex, VideoMode)
End Sub

Sub btnAutoExposure_Click
	Dim flashes As List = cam.SupportedAutoExposureModes
	Dim i As Int = flashes.IndexOf(cam.AutoExposureMode)
	i = (i + 1) Mod flashes.Size
	cam.AutoExposureMode = flashes.Get(i)
	btnAutoExposure.Text = flashes.Get(i)
	cam.StartPreview(MyTaskIndex, VideoMode)
End Sub

Sub btnFocus_Click
	Dim focuses As List = cam.SupportedFocusModes
	Dim i As Int = focuses.IndexOf(cam.FocusMode)
	i = (i + 1) Mod focuses.Size
	cam.FocusMode = focuses.Get(i)
	btnFocus.Text = focuses.Get(i)
	cam.StartPreview(MyTaskIndex, VideoMode)
End Sub

'This sub enables or disables the various UI elements based on the current state.
Sub SetState(Open As Boolean, Busy As Boolean, Video As Boolean)
	For Each b As Button In buttons
		b.Visible = Open And Not(Busy)
	Next
	'btnCamera.Visible = Not(Busy)
	btnRecord.Visible = Open And (Video Or Not(Busy))
	openstate = Open
	ProgressBar1.Visible = Busy
	busystate = Busy
	VideoMode = Video
	barZoom.Visible = Open
	Dim btnRecordText As String
	If VideoMode Then
		If Busy Then
			btnRecordText = Chr(0xF04D)
		Else
			btnRecordText = Chr(0xF03D)
		End If
	Else
		btnRecordText = Chr(0xF030)
	End If
	btnRecord.Text = btnRecordText
End Sub

Sub barZoom_ValueChanged (Value As Int, UserChanged As Boolean)
	Dim OriginalSize As Rect = cam.ActiveArraySize
	Dim Zoom As Float = 1 + Value / 100 * (cam.MaxDigitalZoom - 1)
	Dim Crop As Rect
	Dim NewWidth As Int = OriginalSize.Width / Zoom
	Dim NewHeight As Int = OriginalSize.Height / Zoom
	Crop.Initialize(OriginalSize.CenterX - NewWidth / 2, OriginalSize.CenterY - NewHeight / 2, _
		OriginalSize.CenterX + NewWidth / 2, OriginalSize.CenterY + NewHeight / 2)
	cam.PreviewCropRegion = Crop
	cam.StartPreview(MyTaskIndex, VideoMode)
End Sub

Sub btnClose_Click
	Activity.Finish
End Sub


Sub btnConfig_Click
	StartActivity(ConfigActivity)
End Sub

